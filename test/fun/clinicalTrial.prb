// TODO: array literals
def main(){
    //controlGroup := [0,0,1,0,0];
    controlGroup := array(5);
    controlGroup[0]=0;controlGroup[1]=0;controlGroup[2]=1;controlGroup[3]=0;controlGroup[4]=0;
    //treatedGroup := [1,0,1,1,1];
    treatedGroup := array(5);
    treatedGroup[0]=1;treatedGroup[1]=0;treatedGroup[2]=1;treatedGroup[3]=1;treatedGroup[4]=1;

    isEffective := Bernoulli(1/2);
    probIfTreated := Beta(1,1);
    probIfControl := if isEffective { Beta(1,1) } else { probIfTreated };

    for i in [0..controlGroup.length){
        observe(controlGroup[i] == Bernoulli(probIfControl));
    }
    for i in [0..treatedGroup.length){
        observe(treatedGroup[i] == Bernoulli(probIfTreated));
    }

    isEffectiveP := FromMarginal(isEffective);
    observe(isEffective);
    return (isEffectiveP,probIfTreated,probIfControl); // expected: ((-166320000·probIfControl²·⅟17+-166320000·⅟17)·probIfControl+249480000·probIfControl²·⅟17+41580000·probIfControl⁴·⅟17+41580000·⅟17)·(-probIfTreated+1)·(δ[-isEffectiveP+1]·⅟3600+δ[isEffectiveP]·⅟11088)·[-1+probIfControl≤0]·[-1+probIfTreated≤0]·[-probIfControl≤0]·[-probIfTreated≤0]·probIfControl·probIfTreated⁴
    // TODO: keep polynomial in factored form
}