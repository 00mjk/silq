def main(){
    controlGroup := [0,0,1,0,0];
    treatedGroup := [1,0,1,1,1];

    isEffective := flip(1/2);
    probIfTreated := beta(1,1);
    probIfControl := if isEffective { beta(1,1) } else { probIfTreated };

    for i in [0..controlGroup.length){
        observe(controlGroup[i] == flip(probIfControl));
    }
    for i in [0..treatedGroup.length){
        observe(treatedGroup[i] == flip(probIfTreated));
    }

    isEffectiveP := sample(Marginal(isEffective));
    observe(isEffective);
    return (isEffectiveP,probIfTreated,probIfControl); // expected: (-4·probIfControl²·probIfTreated⁴+-4·probIfControl⁴·probIfTreated⁴+-6·probIfControl³·probIfTreated⁵+-probIfControl·probIfTreated⁵+-probIfControl⁵·probIfTreated⁵+4·probIfControl²·probIfTreated⁵+4·probIfControl⁴·probIfTreated⁵+6·probIfControl³·probIfTreated⁴+probIfControl·probIfTreated⁴+probIfControl⁵·probIfTreated⁴)·(11550/17·δ(1)[isEffectiveP]+3750/17·δ(0)[isEffectiveP])·[-1+probIfControl≤0]·[-1+probIfTreated≤0]·[-probIfControl≤0]·[-probIfTreated≤0]
}
