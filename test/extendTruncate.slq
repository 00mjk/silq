// args: --run

def extend[a:!ℕ](x:uint[a],b:!ℕ)qfree⇒((x as 𝔹^a)~vector(b,0:𝔹)) as uint[a+b];
def truncate[a:!ℕ](x:uint[a],b:!ℕ)qfree{
	(u:𝔹^(a sub b))~(v:𝔹^b):=x as 𝔹^a;
	forget(v=vector(b,0:𝔹));
	return u as uint[a sub b];
}

def foo[n:!ℕ](){
	r:=1:uint[2·n];
	return truncate[2·n](r,n);
}

def main(){
	return foo[3]();
}
