def main(){
    controlGroup := [0,0,1,0,0];
    treatedGroup := [1,0,1,1,1];

    isEffective := flip(1/2);
    probIfTreated := beta(1,1);
    probIfControl := if isEffective { beta(1,1) } else { probIfTreated };

    for i in [0..controlGroup.length){
        observe(controlGroup[i] == flip(probIfControl));
    }
    for i in [0..treatedGroup.length){
        observe(treatedGroup[i] == flip(probIfTreated));
    }

    isEffectiveP := sample(Marginal(isEffective));
    observe(isEffective);
    return (isEffectiveP,probIfTreated,probIfControl); // expected: (-166320000/17·probIfControl²·probIfTreated⁴+-166320000/17·probIfControl⁴·probIfTreated⁴+-249480000/17·probIfControl³·probIfTreated⁵+-41580000/17·probIfControl·probIfTreated⁵+-41580000/17·probIfControl⁵·probIfTreated⁵+166320000/17·probIfControl²·probIfTreated⁵+166320000/17·probIfControl⁴·probIfTreated⁵+249480000/17·probIfControl³·probIfTreated⁴+41580000/17·probIfControl·probIfTreated⁴+41580000/17·probIfControl⁵·probIfTreated⁴)·(1/11088·δ[isEffectiveP]+1/3600·δ[-isEffectiveP+1])·[-1+probIfControl≤0]·[-1+probIfTreated≤0]·[-probIfControl≤0]·[-probIfTreated≤0]
    // TODO: keep polynomial in factored form
}
