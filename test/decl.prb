// skipped

dat Filter{
    x: ℝ , v: ℝ, a: ℝ;
    def Filter(x: ℝ,v: ℝ, a: ℝ){
        // (this.x,this.v,this.a) = (x,v,a); // TODO
    }
    // update step: compute new state after one time step
    def update(t: ℝ){
        /+this.x += t*v;
        this.v += t*a;
        this.a += t*Gauss(0,1);+/ // TODO
    }
    // measure x position with noise
    def measureX(x: ℝ){
        // observe(this.x + Gauss(0,1) == x); // TODO
    }
}

def foo(x){
    return x;
}

def main(y: ℝ × ℝ × ℝ × 𝟙):𝟙{
    y = (1,2,3,());
    x:=(3,2,1,()); //y:=2;
    x=y;
    x=foo(2):ℝ;
    (x,y) = (y,x);
    f := Filter(1,2,3);
    f := 3;
    a := array(3);
    a[0]=2;
    z := a.length;
    w := if 2 { 3 }else { array(4) };
    (aa,bb) := (3,4);
    xx:=main(y);
    return (xx,a[2],aa,bb);
}
