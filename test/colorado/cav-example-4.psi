// TODO: this contains unbounded loops in the original, but only finite number of iterations are
// relevant for computing probabilities
// TODO: allow computing probabilities

def main(){
    x := 0;
    guard := -1;
    guard = uniform(0,1);
    //while guard >= 1/2 {
    repeat 21{ if guard >= 1/2 {
        x = x + 1;
		guard = uniform(0,1);
    }}
    return x; // expected: δ[-x+10]·⅟2048+δ[-x+11]·⅟4096+δ[-x+12]·⅟8192+δ[-x+13]·⅟16384+δ[-x+14]·⅟32768+δ[-x+15]·⅟65536+δ[-x+16]·⅟131072+δ[-x+17]·⅟262144+δ[-x+18]·⅟524288+δ[-x+19]·⅟1048576+δ[-x+1]·⅟4+δ[-x+20]·⅟2097152+δ[-x+21]·⅟2097152+δ[-x+2]·⅟8+δ[-x+3]·⅟16+δ[-x+4]·⅟32+δ[-x+5]·⅟64+δ[-x+6]·⅟128+δ[-x+7]·⅟256+δ[-x+8]·⅟512+δ[-x+9]·⅟1024+δ[x]·⅟2
}

/*x = 0;
  guard = -1.0;
  guard = unifReal(0.0, 1.0);
  while (guard >= 0.5) do
  x = x + 1;
  guard = unifReal(0.0, 1.0)
  end;
  estimateProb(x <= 0);
  estimateProb(x <= 1);
  estimateProb(x <= 2);
  estimateProb(x <= 3);
  estimateProb(x <= 4);
  estimateProb(x <= 5);
  estimateProb(x <= 6);
  estimateProb(x <= 7);
  estimateProb(x <= 8);
  estimateProb(x <= 9);
  estimateProb(x <= 10);
  estimateProb(x <= 12);
  estimateProb(x <= 14);
  estimateProb(x <= 16);
  estimateProb(x <= 18);
  estimateProb(x <= 20)*/
