
dat Filter{
    x: ℝ , v: ℝ, a: ℝ;
    def Filter(x: ℝ,v: ℝ, a: ℝ){
        (this.x,this.v,this.a) = (x,v,a); // TODO
    }
    // update step: compute new state after one time step
    def update(t: ℝ){
        this.x += t*this.v;
        this.v += t*this.a;
        this.a += t*Gauss(0,1); // TODO
    }
    // measure x position with noise
    def measureX(x: ℝ, t: ℝ){
        //observe(this.x + Gauss(0,1) == x); // TODO
        o := this.x + t*Gauss(0,1);
        cobserve(o,x);
    }
}


def main(){
    //data := readCSV("data/kalman.csv");
    data := [1,3,6,10,15,13,12];
    filter := Filter(0,0,0);
    for i in [0..data.length){
        filter.update(1);
        filter.measureX(data[i],1);
	/+t := 1;
        filter.x += t*filter.v;
        filter.v += t*filter.a;
        filter.a += t*Gauss(0,1); // TODO
        o := filter.x + t*Gauss(0,1);
        cobserve(o,data[i]);+/
    }
    return filter.x;
}